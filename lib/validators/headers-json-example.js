// Generated by CoffeeScript 1.7.1
var HeadersJsonExample, JsonSchema, SchemaGenerator, SchemaProperties, errors, jsonPointer, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

errors = require('../errors');

JsonSchema = require('./json-schema').JsonSchema;

_ref = require('../utils/schema-generator'), SchemaGenerator = _ref.SchemaGenerator, SchemaProperties = _ref.SchemaProperties;

jsonPointer = require('json-pointer');

HeadersJsonExample = (function(_super) {
  __extends(HeadersJsonExample, _super);

  function HeadersJsonExample(real, expected) {
    var error, outError;
    this.real = real;
    this.expected = expected;
    if (typeof this.real !== 'object') {
      throw new errors.MalformedDataError("Real is not an Object");
    }
    if (typeof this.expected !== 'object') {
      throw new errors.MalformedDataError("Expected is not an Object");
    }
    try {
      this.expected = this.prepareHeaders(JSON.parse(JSON.stringify(this.expected)));
    } catch (_error) {
      error = _error;
      outError = new errors.MalformedDataError("Headers validator - Expected malformed:" + error.message);
      outError['data'] = this.expected;
      throw outError;
    }
    try {
      this.real = this.prepareHeaders(JSON.parse(JSON.stringify(this.real)));
    } catch (_error) {
      error = _error;
      outError = new errors.MalformedDataError("Headers validator - Real malformed:" + error.message);
      outError['data'] = this.real;
      throw outError;
    }
    this.schema = this.getSchema(this.prepareHeaders(this.expected));
    if (this.schema !== void 0) {
      if (this.schema['properties'] !== void 0) {
        ['date', 'expires'].forEach((function(_this) {
          return function(header) {
            if (_this.schema['properties'][header] !== void 0) {
              return delete _this.schema['properties'][header]['enum'];
            }
          };
        })(this));
      }
    }
    HeadersJsonExample.__super__.constructor.call(this, this.real, this.schema);
  }

  HeadersJsonExample.prototype.prepareHeaders = function(headers) {
    var key, transformedHeaders, value;
    if (!(headers instanceof Object)) {
      return headers;
    }
    transformedHeaders = {};
    for (key in headers) {
      value = headers[key];
      transformedHeaders[key.toLowerCase()] = value;
    }
    return transformedHeaders;
  };

  HeadersJsonExample.prototype.getSchema = function(data) {
    var properties, schemaGenerator;
    properties = new SchemaProperties({});
    properties.set({
      keysStrict: false,
      valuesStrict: true,
      typesStrict: false
    });
    schemaGenerator = new SchemaGenerator({
      json: data,
      properties: properties
    });
    return schemaGenerator.generate();
  };

  return HeadersJsonExample;

})(JsonSchema);

module.exports = {
  HeadersJsonExample: HeadersJsonExample
};
